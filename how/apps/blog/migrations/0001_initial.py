# Generated by Django 5.2.3 on 2025-08-05 06:13

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        ("wagtailcore", "0094_alter_page_locale"),
        ("wagtailimages", "0027_image_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="Index",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Last update",
                        verbose_name="Last update",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date created",
                        verbose_name="Date created",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog index page",
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Last update",
                        verbose_name="Last update",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date created",
                        verbose_name="Date created",
                    ),
                ),
                (
                    "headline",
                    models.CharField(
                        db_index=True, help_text="Article headline", max_length=128
                    ),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [
                            ("code", 2),
                            ("paragraph", 3),
                            ("video", 4),
                            ("image", 5),
                            ("quote", 6),
                            ("document", 7),
                        ],
                        block_lookup={
                            0: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("bash", "Bash/Shell"),
                                        ("css", "CSS"),
                                        ("diff", "diff"),
                                        ("html", "HTML"),
                                        ("javascript", "Javascript"),
                                        ("json", "JSON"),
                                        ("python", "Python"),
                                        ("scss", "SCSS"),
                                        ("yaml", "YAML"),
                                    ],
                                    "help_text": "Coding language",
                                    "identifier": "language",
                                    "label": "Language",
                                },
                            ),
                            1: (
                                "wagtail.blocks.TextBlock",
                                (),
                                {"identifier": "code", "label": "Code"},
                            ),
                            2: (
                                "wagtail.blocks.StructBlock",
                                [[("language", 0), ("code", 1)]],
                                {"help_text": "Code"},
                            ),
                            3: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"help_text": "Rich Text"},
                            ),
                            4: (
                                "wagtail.embeds.blocks.EmbedBlock",
                                (),
                                {"help_text": "Video"},
                            ),
                            5: (
                                "wagtail.images.blocks.ImageBlock",
                                [],
                                {"help_text": "Image"},
                            ),
                            6: (
                                "wagtail.blocks.BlockQuoteBlock",
                                (),
                                {"help_text": "Quote"},
                            ),
                            7: (
                                "wagtail.documents.blocks.DocumentChooserBlock",
                                (),
                                {"help_text": "Document"},
                            ),
                        },
                        help_text="Article content",
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        help_text="Article image",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "News article",
                "abstract": False,
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="ArticleTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="blog.article",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="article",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="Article tags",
                through="blog.ArticleTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
    ]
